//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Cage = newCageTable("public", "cage", "")

type cageTable struct {
	postgres.Table

	// Columns
	UUID postgres.ColumnString
	Key  postgres.ColumnString
	Data postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type CageTable struct {
	cageTable

	EXCLUDED cageTable
}

// AS creates new CageTable with assigned alias
func (a CageTable) AS(alias string) *CageTable {
	return newCageTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CageTable with assigned schema name
func (a CageTable) FromSchema(schemaName string) *CageTable {
	return newCageTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CageTable with assigned table prefix
func (a CageTable) WithPrefix(prefix string) *CageTable {
	return newCageTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CageTable with assigned table suffix
func (a CageTable) WithSuffix(suffix string) *CageTable {
	return newCageTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCageTable(schemaName, tableName, alias string) *CageTable {
	return &CageTable{
		cageTable: newCageTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newCageTableImpl("", "excluded", ""),
	}
}

func newCageTableImpl(schemaName, tableName, alias string) cageTable {
	var (
		UUIDColumn     = postgres.StringColumn("uuid")
		KeyColumn      = postgres.StringColumn("key")
		DataColumn     = postgres.StringColumn("data")
		allColumns     = postgres.ColumnList{UUIDColumn, KeyColumn, DataColumn}
		mutableColumns = postgres.ColumnList{KeyColumn, DataColumn}
		defaultColumns = postgres.ColumnList{}
	)

	return cageTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UUID: UUIDColumn,
		Key:  KeyColumn,
		Data: DataColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
